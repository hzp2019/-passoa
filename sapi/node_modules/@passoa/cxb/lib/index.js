"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var url = require("url");
var path = require("path");
var cp = require("child_process");
var dist_1 = require("./dist");
var environment = require("./environment");
var downloader_1 = require("./downloader");
var util_1 = require("util");
var uploader_1 = require("./uploader");
var dist = new dist_1.Dist();
var downloader = new downloader_1.Downloader({});
process.on('unhandledRejection', function (error) {
    console.error('unhandledRejection', error);
    process.exit(1); // To exit with a 'failure' code
});
function initConfig() {
    var pkg = require(process.cwd() + "/package.json");
    var env = process.env;
    var config = {
        name: pkg.name,
        configuration: env.build_type || 'Release',
        external: [],
        version: pkg.version,
        platform: plat_format(env.platform || process.platform),
        arch: arch_format(env.arch || process.arch),
        build_cmd: [],
        toolset_path: env.toolset_path || '',
        make_path: env.make_path || 'make',
        module_name: pkg.name,
        module_path: 'build',
        remote_path: 'repertory/cxb/',
        package_name: '',
        host: '',
        hosted_path: '',
        hosted_tarball: '',
        staged_tarball: '',
        method: 'put',
        form: false,
        root_dir: process.cwd()
    };
    var opts = require(config.root_dir + "/cxb.config.js")(config);
    mergeConfig(config, opts);
    config.hosted_path = url.resolve(config.host, config.remote_path);
    config.hosted_tarball = url.resolve(config.hosted_path, config.package_name);
    return config;
}
exports.initConfig = initConfig;
function mergeConfig(config, opts) {
    for (var key in opts) {
        if (opts.hasOwnProperty(key) && config.hasOwnProperty(key)) {
            config[key] = opts[key];
        }
    }
}
function run(argv) {
    return __awaiter(this, void 0, void 0, function () {
        var config, cwd, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, dist.ensureDownloaded()];
                case 1:
                    _a.sent();
                    if (usage(argv))
                        return [2 /*return*/, -1];
                    config = initConfig();
                    if (!(argv.b || argv.build)) return [3 /*break*/, 3];
                    return [4 /*yield*/, build(config)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 12];
                case 3:
                    if (!(argv.i || argv.install)) return [3 /*break*/, 7];
                    cwd = process.cwd();
                    r = cwd.indexOf('node_modules');
                    if (!(r < 0)) return [3 /*break*/, 4];
                    console.log('donot install when process.cwd in this project!!!');
                    return [2 /*return*/, 0];
                case 4: return [4 /*yield*/, install(config)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [3 /*break*/, 12];
                case 7:
                    if (!(argv.p || argv.pack)) return [3 /*break*/, 9];
                    return [4 /*yield*/, pack(config)];
                case 8:
                    _a.sent();
                    return [3 /*break*/, 12];
                case 9:
                    if (!(argv.r || argv.release)) return [3 /*break*/, 11];
                    return [4 /*yield*/, release(config)];
                case 10:
                    _a.sent();
                    return [3 /*break*/, 12];
                case 11:
                    console.log('cxb: show help with --help');
                    return [2 /*return*/, -2];
                case 12: return [2 /*return*/, 0];
            }
        });
    });
}
exports.run = run;
function usage(argv) {
    var help = argv.h || argv.help;
    if (help) {
        // If they didn't ask for help, then this is not a "success"
        var log = help ? console.log : console.error;
        log('Usage: pm <modules> [<Options> ...]');
        log('');
        log('  install native modules@passoa');
        log('');
        log('Options:');
        log('');
        log('  -h, --help     Display this usage info');
        log('  -b, --build   build cpp for project');
        log('  -r, --release   release node tgz for project');
        log('  -i, --install   install cpp module(it will build cpp module if could not download from remote)');
        return -1;
    }
    return 0;
}
function eval_template(template, opts) {
    template = template.replace(/\{([a-zA-Z0-9_-]+)\}/g, function (str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var key = opts[args[0]] || process.env[args[0]] || 'undefined';
        return key;
    });
    // Object.keys(opts).forEach(function(key) {
    // 	var pattern = '{' + key + '}';
    // 	while (template.indexOf(pattern) > -1) {
    // 		template = template.replace(pattern, opts[key]);
    // 	}
    // });
    return template;
}
// url.resolve needs single trailing slash
// to behave correctly, otherwise a double slash
// may end up in the url which breaks requests
// and a lacking slash may not lead to proper joining
function fix_slashes(pathname) {
    if (pathname.slice(-1) != '/') {
        return pathname + '/';
    }
    return pathname;
}
// remove double slashes
// note: path.normalize will not work because
// it will convert forward to back slashes
function drop_double_slashes(pathname) {
    return pathname.replace(/\/\//g, '/');
}
function plat_format(plat) {
    switch (plat) {
        case 'win32':
        case 'windows':
            return 'windows';
    }
    return plat;
}
function arch_format(arch) {
    switch (arch) {
        case 'ia32':
        case 'x32':
        case 'x86':
            return 'x86';
        case 'x86_64':
        case 'x64':
            return 'x64';
    }
    return arch;
}
function isStringArray(arr) {
    var e_1, _a;
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var iterator = arr_1_1.value;
            if (typeof iterator != 'string')
                return false;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return true;
}
function isStringArray2(arr) {
    var e_2, _a;
    try {
        for (var arr_2 = __values(arr), arr_2_1 = arr_2.next(); !arr_2_1.done; arr_2_1 = arr_2.next()) {
            var iterator = arr_2_1.value;
            if (!Array.isArray(iterator) && !isStringArray(iterator))
                return false;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return true;
}
function addDefaultCmd(bc, config) {
    var incPaths;
    if (dist.headerOnly) {
        incPaths = [path.join(dist.internalPath, '/include/node')];
    }
    else {
        var nodeH = path.join(dist.internalPath, '/src');
        var v8H = path.join(dist.internalPath, '/deps/v8/include');
        var uvH = path.join(dist.internalPath, '/deps/uv/include');
        incPaths = [nodeH, v8H, uvH];
    }
    // Includes:
    bc.push("-DCMAKE_JS_INC=" + incPaths.join(';'));
    if (environment.isWin) {
        // Win
        var libs = dist.winLibs;
        if (libs.length) {
            bc.push("-DCMAKE_JS_LIB=" + libs.join(';'));
        }
    }
    bc.push("-DCXB_MODULE_DIST=" + config.root_dir + "/" + config.module_path);
}
function buildByStringArray(build_str, config, bc) {
    for (var key in bc) {
        if (bc.hasOwnProperty(key)) {
            var element = bc[key];
            bc[key] = eval_template(element, config);
        }
    }
    fs.emptyDirSync("tmp/" + build_str);
    process.chdir("tmp/" + build_str);
    bc = ['../../'].concat(bc);
    addDefaultCmd(bc, config);
    console.log(bc);
    var r = cp.spawnSync('cmake', bc, { stdio: 'inherit' });
    if (r.status) {
        throw new Error('cmake generator fails');
    }
    r = cp.spawnSync('cmake', ['--build', './', '--config', config.configuration], { stdio: 'inherit' });
    if (r.status) {
        throw new Error('cmake build fails');
    }
    process.chdir('../../');
}
function build(config) {
    return __awaiter(this, void 0, void 0, function () {
        var task1, task2, key, obj, urlstring, pathname, tmp, dst, build_str, bc, idx, bc_1, bc_1_1, iterator;
        var e_3, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!config.external) return [3 /*break*/, 3];
                    task1 = new Array(), task2 = new Array();
                    for (key in config.external) {
                        if (config.external.hasOwnProperty(key)) {
                            obj = config.external[key];
                            urlstring = '';
                            if (util_1.isArray(obj)) {
                                urlstring = obj[0];
                            }
                            else if (util_1.isString(obj)) {
                                urlstring = obj;
                            }
                            else {
                                throw new Error('cxb.external config has error');
                            }
                            pathname = url.parse(urlstring).pathname;
                            if (!pathname)
                                throw new Error('cxb.external config has error:' + pathname);
                            tmp = config.root_dir + "/tmp/stage/" + key + "/" + path.basename(pathname);
                            dst = path.join(config.root_dir + "/3rd", key);
                            if (fs.existsSync(dst)) {
                                break;
                            }
                            console.log(urlstring, tmp);
                            task1.push({ src: urlstring, dst: tmp });
                            task2.push({ src: tmp, dst: dst, option: { strip: obj[1] } });
                        }
                    }
                    return [4 /*yield*/, downloader.downloadAll(task1)];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, downloader.unzipAll(task2)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    if (config.build_cmd) {
                        build_str = config.platform + "_" + config.arch;
                        bc = config.build_cmd[build_str];
                        if (!bc) {
                            throw new Error("please check your config for " + build_str);
                        }
                        if (Array.isArray(bc)) {
                            if (isStringArray(bc)) {
                                buildByStringArray(build_str, config, bc);
                            }
                            else if (isStringArray2(bc)) {
                                idx = 0;
                                try {
                                    for (bc_1 = __values(bc), bc_1_1 = bc_1.next(); !bc_1_1.done; bc_1_1 = bc_1.next()) {
                                        iterator = bc_1_1.value;
                                        buildByStringArray(build_str + "_" + idx++, config, iterator);
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (bc_1_1 && !bc_1_1.done && (_a = bc_1.return)) _a.call(bc_1);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            }
                            else {
                                throw new Error("please check your config for " + build_str);
                            }
                        }
                    }
                    else {
                        throw new Error('build_cmd has not in cxb.config.js');
                    }
                    return [2 /*return*/, 0];
            }
        });
    });
}
exports.build = build;
function install(config) {
    return __awaiter(this, void 0, void 0, function () {
        var tarball, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tarball = config.module_name + "-v" + config.version + "-" + config.platform + "-" + config.arch + ".tar.gz";
                    config.staged_tarball = path.join('tmp/stage', tarball);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, downloader.downloadAll([{ src: config.hosted_tarball, dst: config.staged_tarball }])];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, downloader.unzipAll([{ src: config.staged_tarball, dst: './' }])];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    err_1 = _a.sent();
                    console.log(config.hosted_tarball);
                    console.log(err_1.message);
                    return [2 /*return*/, build(config)];
                case 5: return [2 /*return*/, 0];
            }
        });
    });
}
exports.install = install;
function release(config) {
    return __awaiter(this, void 0, void 0, function () {
        var up, src, env;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    up = new uploader_1.Uploader();
                    src = path.join(config.root_dir, config.module_path);
                    config.staged_tarball = path.join(config.root_dir, "tmp/" + config.module_name + ".tar.gz");
                    return [4 /*yield*/, up.packTgz(src, config.staged_tarball)];
                case 1:
                    _a.sent();
                    env = process.env;
                    config.token = Buffer.from(env.CXBUSERNAME + ":" + env.CXBPASSWORD, 'utf8').toString('base64');
                    return [4 /*yield*/, up.upload(config.hosted_tarball, config.staged_tarball, config.token, {
                            method: config.method,
                            form: config.form
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/, 0];
            }
        });
    });
}
exports.release = release;
function pack(config) {
    return __awaiter(this, void 0, void 0, function () {
        var up, src;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    up = new uploader_1.Uploader();
                    src = path.join(config.root_dir, config.module_path);
                    config.staged_tarball = path.join(config.root_dir, "tmp/" + config.module_name + ".tar.gz");
                    return [4 /*yield*/, up.packTgz(src, config.staged_tarball)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.pack = pack;
//# sourceMappingURL=data:application/json;base64,